const { json2html } = require('html2json');

module.exports =  {

    uhtmlnotif: function(data, room){
		//utml stuff 

		var now = new Date(Date.now());
		let uhtml = require('origindb')('uhtml');
        if (data.includes('/uhtml wt')){
            uhtml('uhtmldata').set('lastWT', now + " " + data);
            var userName = '5mat'; let title = 'BDgamedebug';
		    let htmlpageIntro = `/sendhtmlpage ${userName}, ${title}`;

		    let contents = ''; 
		    contents = uhtml('uhtmldata').get('lastWT');

		    let returnStatement = `${htmlpageIntro}, ${contents}`;
            return returnStatement;
        }
        if (data.includes('playerdata')){
            uhtml('uhtmldata').set('votingStage', data);
        }
		uhtml('uhtmldata').set('lastUHTMLmessage', now + " " + data);
        // time to digest the html 
        try {
            let turnorder = data.split('Turn Order: ')[1].split('</b>')[0].replaceAll(' ',' ').split(',');
            uhtml('uhtmldata').set('lastTurnOrder', turnorder);
        } catch (e) {
            error('no map lol');
        }       
        let playerDataArray = ""; uhtml('uhtmldata').set('playerPosition', "");
        if(data.includes('<summary>Map</summary>')){
            uhtml('uhtmldata').set('lastINFO', now + " " + data);
            const myArray = data.split(">");
            let pass; let mapText = []; let columnCount = 0; let elementCount = 0; let rowCount = 0; let Pcount = 0;
            for (let i = 0; i < myArray.length; i++) {
                const element = myArray[i];
                let playerPositionArray = []; 
                if (element.includes('</b')){
                    pass = element.split("</")
                    if (pass[0].includes("P")){
                        console.log("LOOK HERE: " + pass[0] + " Position: " + elementCount + ", " + rowCount);
                        let entry = pass[0] + " Position: " + String.fromCharCode(65 + rowCount) + ", " + elementCount + " || ";
                        if (elementCount === 0){
                            elementCount = columnCount;
                            let fakeRowCount = rowCount - 1;
                            entry = pass[0] + " Position: " + String.fromCharCode(65 + fakeRowCount) + ", " + elementCount;
                            Pcount = Pcount + 1;
                        }
                        if (Pcount > 0){
                            entry = pass[0] + " Position: " + String.fromCharCode(65 + rowCount - Pcount) + ", " + elementCount + " || ";
                        }
                        let playerPositionBefore = uhtml('uhtmldata').get('playerPosition');
                        playerPositionArray = playerPositionBefore + " " + entry;
                        uhtml('uhtmldata').set('playerPosition', playerPositionArray);
                    } else if (!isNaN(pass[0])){
                        if (!(pass[0] === "  " || pass[0] === " ") ) {
                            columnCount++; 
                            console.log('this is it' + pass[0]);
                        }
                    } 
                }
                if (element.includes('title')){
                    pass = element.split('title=');
                    if(pass[1].includes('align="center"')){pass[1] = pass[1].replace(' align="center"','');}
                    pass[1] = pass[1].slice(0, -1);
                    mapText += pass[1].replace('"','');
                    mapText += ", ";
                    elementCount++;
                }
                // if P then do stuff
                if (elementCount === columnCount && columnCount !== 0){
                    mapText += '\r\n';
                    elementCount = 0;
                    rowCount++;
                }
                if (element.includes("Player Data")){
                    //playerdata time !
                    playerDataArray = myArray.slice(i,myArray.length-1).join('>');
                    playerDataArray = playerDataArray.replace('Player Data</summary><div style=\"overflow-x:auto\">','').replace('</div></details></div','');
                    playerDataArray = playerDataArray.split('<tr style=\"min-height:22px\"><td colspan=\"15\"')[0]
                    playerDataArray = playerDataArray + '</table>';
                    playerDataArray = playerDataArray.replaceAll('<th>','<td>').replaceAll('</th>','</td>');
                    playerDataArray = playerDataArray.replaceAll('<th ','<td ').replaceAll('</th ','</td ');
                    for (let i = 0; i < 9; i++) {
	                    playerDataArray = playerDataArray.replace('<td>','<th>');
                        playerDataArray = playerDataArray.replace('</td>','</th>');
	                }
                    if(playerDataArray.includes('Items')){              
                        playerDataArray = playerDataArray.replace('<td ','<th ');
                        playerDataArray = playerDataArray.replace('</td>','</th>');
                    }
                    //playerDataArray = playerDataArray.replace('<th colspan=\"6\"  style=\"min-width:158px\">Items</th>','<th>Items</th><th>Items</th><th>Items</th><th>Items</th><th>Items</th><th>Items</th>')

                    const HtmlTableToJson = require('html-table-to-json');
                    const tabletojson = require('tabletojson').Tabletojson;
                    json2 = HtmlTableToJson.parse(playerDataArray, { useFirstRowForHeadings: true });
                    json = tabletojson.convert(playerDataArray);
                    
                    //uhtml('uhtmldata').set('playerList', json);
                    uhtml('uhtmldata').set('playerList', json);

                    function checkForItem(jsonObj,iteration,itemColumn) {
                        try {
                            console.log("hey look " + jsonObj[0][iteration][itemColumn])
                            let pass = jsonObj[0][iteration][itemColumn];
                            if (typeof pass !== undefined) {
                                jsonObj[0][iteration]["Items"] += ", " + pass;
                                delete jsonObj[0][iteration][itemColumn];
                            }
                        } catch (error) {
                            console.log('it dont exist');
                        }
                    }

                    console.log(`hey the json length is this: ${json.length}`);
                    json.forEach(element => {
                        for (let i = 0; i < element.length; i++) {
                            checkForItem(json,i,"9");
                            checkForItem(json,i,"10");
                            checkForItem(json,i,"11");
                            checkForItem(json,i,"12");
                            checkForItem(json,i,"13");
                            checkForItem(json,i,"14");
                        }
                    });
                    
                    uhtml('uhtmldata').set('playerList', json);

                    //time to remove all the undefines
                    json.forEach(element => {
                        for (let i = 0; i < element.length; i++) {
                            json[0][i]["Items"] = json[0][i]["Items"].split(", ");
                            json[0][i]["Items"] = json[0][i]["Items"].filter(e => e !== "undefined");
                        }
                    });
                    break;
                }
            }
            
            uhtml('uhtmldata').set('plHTML', playerDataArray);
            try {
                mapText = mapText.split('\r\n');
                mapText = mapText.map((e) => e.split(', '));
                mapText = mapText.map((e) => e.slice(0, -1));
                mapText.pop();
            uhtml('uhtmldata').set('lastMap', mapText);
            } catch (e) {
                error('idk');
            }
            
        }
        
		var userName = '4mat'; let title = 'BDgame';
		let htmlpageIntro = `/sendhtmlpage ${userName}, ${title}`;

		let contents = ''; 
		contents = uhtml('uhtmldata').get('lastUHTMLmessage');

		let returnStatement = `${htmlpageIntro}, ${contents}`;
        return returnStatement;
	},
    getUHTMLcontents : function(){
        let uhtml = require('origindb')('uhtml');
        return uhtml('uhtmldata').get('lastUHTMLmessage');
    },
    makeButtonsForWeapon: function(weapon, level, room = 'battledome', stat = {"A": "10", "M": "10"}){
        let data = require('origindb')('data');
        let weaponIndex = data('branch').get('weapon');
        let abilities;
        console.log(weaponIndex);

        // find if the weapon is inside the branch variable 
        if(weaponIndex.indexOf(weapon) > -1){
            // find which branch the weapon belongs to
            let branchIndex = data('branch').get('branch');
            for (let i = 0; i < branchIndex.length; i++){
                if (data('branch').get(branchIndex[i]).includes(weapon)){
                    // get the weapon's abilities
                    abilities = data(toID(branchIndex[i])).get(weapon);
                    // remove the abilities greater than the user's current level
                    abilities = abilities.filter(ability => ability.Lvl <= level);
                    console.log(abilities);
                    break;
                }
            }
        }
        // make buttons for the weapon with this format 
        // <button class='button' name='send' value='/pm " + Users.self.name + ", " + Config.commandCharacter + "joingame " + this.room.id + "'>Join</button>
        
        // for each ability make a button
        let returnStatement = {}; let returnStatement2 = ''; let pass = '';
        for (let i = 0; i < abilities.length; i++){
            let ability = abilities[i];
            let attackingStat = (ability.Type === "Magical") ? stat.M : (ability.Type === "Physical") ? stat.A : "";
            
            let str = ability.Roll;
            let parts = str.split(/d|\+/);
            let X = parseInt(parts[0]);
            let Y = parseInt(parts[1]);
            let Z = parseInt(parts[2]) + Number(attackingStat);

            let roll = `| ${X}d${Y}+${Z} |`;
            if (isNaN(X)){
                roll = ` `;
            }
            let button2 = `<button class='button' name='send' value='/pm thatcableguy, %use ${ability.Name}'>${ability.Name}</button>`;
            let button  = `<button class='button' name='send' value='/msgroom ${room}, ${ability.Name} @ target ${roll} MR ${ability.MR} | secondary effect goes here'>target</button>`;

            console.log(button);
            console.log(ability.Name);
            returnStatement[ability.Name] = button;
            console.log(returnStatement[ability.Name]);

            returnStatement2 = returnStatement2 + button2;
            pass = ability.Name;
        }
        let uhtml = require('origindb')('uhtml');
        uhtml('uhtmldata').set('weaponmoves', returnStatement);
        return returnStatement2;
    },
    makeButtonsForClass: function(_class, level, room = 'battledome', stat = {"A": "0", "M": "0"}){
        let data = require('origindb')('data');
        // get the class abilities
        let abilities = data('classes').get(_class);

        // remove the abilities greater than the user's current level
        abilities = abilities.filter(ability => ability.Lvl <= level);
        // make buttons for the weapon with this format 
        // <button class='button' name='send' value='/pm " + Users.self.name + ", " + Config.commandCharacter + "joingame " + this.room.id + "'>Join</button>
        
        // for each ability make a button
        let returnStatement = {}; let returnStatement2 = ''; let pass = '';
        for (let i = 0; i < abilities.length; i++){
            let ability = abilities[i];
            let attackingStat = (ability.Type === "Magical") ? stat.M : (ability.Type === "Physical") ? stat.A : "";
            
            let str = ability.Roll;
            let parts = str.split(/d|\+/);
            let X = parseInt(parts[0]);
            let Y = parseInt(parts[1]);
            let Z = parseInt(parts[2]) + Number(attackingStat);

            let roll = `| ${X}d${Y}+${Z} |`;
            if (isNaN(X)){
                roll = ` `;
            }

            let MR = "MR " + toString(ability.MR);

            if(ability.MR === "-"){
                MR = "";
            }

            let button2 = `<button class='button' name='send' value='/pm thatcableguy, %use ${ability.Name}'>${ability.Name}</button>`;
            let button  = `<button class='button' name='send' value='/msgroom ${room}, ${ability.Name} @ target ${roll} ${MR} | secondary effect goes here&#10;/pm thatcableguy, %cut recent'>target</button>`;

            console.log(button);
            console.log(ability.Name);
            returnStatement[ability.Name] = button;
            console.log(returnStatement[ability.Name]);

            returnStatement2 = returnStatement2 + button2;
            pass = ability.Name;
        }
        let uhtml = require('origindb')('uhtml');
        uhtml('uhtmldata').set('classmoves', returnStatement);
        return returnStatement2;
    },
    getTOcontents: function(){
        let uhtml = require('origindb')('uhtml');
        return uhtml('uhtmldata').get('lastTurnOrder');
    },
    getClassAndWeap: function(target){
        let uhtml = require('origindb')('uhtml');
        playerList = uhtml('uhtmldata').get('playerList');
        let pass; 
        playerList.forEach(element => {
            for (let i = 0; i < element.length; i++) {
                console.log('hey listen ' + element[i]["Name"]);
                let toIDname;
                if (element[i]["Name"]){
                    toIDname = element[i]["Name"].toLowerCase().replace(/[^a-z0-9]/g, "");
                }
                if (toIDname === target.toLowerCase().replace(/[^a-z0-9]/g, "")){
                    pass = element[i]["Class/Weapon"];
                }
            }
        });
        return pass;
    },

    getPlayerPosition: function(){
        let uhtml = require('origindb')('uhtml');
        return uhtml('uhtmldata').get('playerPosition');
    },
    lockSquad: function(squadNumber){
        let uhtml = require('origindb')('uhtml');  
        room = "groupchat-battledome-" + squadNumber;
        if (room === "groupchat-battledome-main"){
            room = "battledome";
        }
        uhtml('uhtmldata').set('room', room);
    },
    getRoom: function(){
        let uhtml = require('origindb')('uhtml');
        return uhtml('uhtmldata').get('room');
    },
    getStats: function(playerName = "all"){
        let uhtml = require('origindb')('uhtml');
        let PLstats = uhtml('uhtmldata').get('playerList');
        if (playerName === "all") { 
            return PLstats[0];
        }
        for (let i = 0; i < PLstats[0].length; i++){
            if (PLstats[0][i]["Name"].toLowerCase().replace(/[^a-z0-9]/g, "") === playerName.toLowerCase().replace(/[^a-z0-9]/g, "")) {
                return PLstats[0][i];
            }
        }
    },
    getWeaponMoves(){
        let uhtml = require('origindb')('uhtml');
        return uhtml('uhtmldata').get('weaponmoves');
    },
    getClassMoves(){
        let uhtml = require('origindb')('uhtml');
        return uhtml('uhtmldata').get('classmoves');
    }
}